import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JPanel;

/** Klasa glownego pola gry */

public class GameField extends JPanel {

    /*
    private static final String Time = "Time";
    private static final String Score = "Score";
    private static final String Fuel = "Fuel";
*/

    /**
     * Pole obiektu klasy punkt przechowujacego punkty potrzebne do narysowania podloza
     */
    private Point[] area;

    /** Konstruktor pola gry */
    public GameField() throws IOException{
        File file = new File("resources/area.properties");
        FileInputStream fileInput = new FileInputStream(file);
        Properties properties = new Properties();
        properties.load(fileInput);
        fileInput.close();

        createAreaPoints(properties);
    }


    /**
     * Metoda pobierajaca punkty z pliku konfiguracyjnego i umieszczajaca je w obiekcie tablicowym area
     * @param properties
     */
    private void createAreaPoints(Properties properties){
        area = new Point[Integer.parseInt(properties.getProperty("point_number"))];
        for(int i = 0; i<area.length;++i){
            area[i] = new Point(Integer.parseInt(properties.getProperty("pointX_" + Integer.toString(i))),
                    Integer.parseInt(properties.getProperty("pointY_" + Integer.toString(i))));
        }
    }
    

    /**
     * Metoda rysujaca podloze, jako parametry przyjmuje tablice punktow
     * @param point
     * @param g
     */
    private void drawArea(Graphics g, Point[] point){

        for(int i=1; i<point.length;++i){
            g.drawLine((int)(point[i-1].getX()), (int)(point[i-1].getY()),
                    (int)(point[i].getX()), (int)(point[i].getY()));
        }
    }

    /** Metoda wyswietlajaca obrazki w panelu */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;


        if (area!=null) {
            drawArea(g,area);
        }
    }
}
